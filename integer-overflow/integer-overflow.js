console.log('=== Integer overflow in Javascript ===')
console.log('Converting string to "Number"')
console.log(Number('123'))
console.log('Converting a big string string to "Number" turns into estimates')
console.log(Number('999999999999999999999999999999999999999999999999'))
// In Javascript, we have the concept of "safe" integers: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger
// This means that we can convert from int to double with not problem. 
console.log('This is the max "safe" integer in JS')
console.log(Number.MAX_SAFE_INTEGER)
const max_plus_1 = Number.MAX_SAFE_INTEGER + 1
const max_plus_2 = Number.MAX_SAFE_INTEGER + 2
console.log('This is the max "safe" integer in JS + 1.95')
console.log(max_plus_1 + 0.95)
console.log('max_plus_1 == max_plus_2 ...should be false right??')
console.log(max_plus_1 == max_plus_2)

// Math gets weird around MAX_VALUE
// Docs: "anything after Number.MAX_VALUE is Number.Infinity"
// Reality: ehhh, inconsistent at best
console.log('This is the MAX value integer in JS')
console.log(Number.MAX_VALUE)
console.log('Number.MAX_VALUE + 1 - Number.MAX_VALUE... should be 1 right??')
console.log(Number.MAX_VALUE + 1 - Number.MAX_VALUE)
console.log('MAX_VALUE * 1.1 is infinity')
console.log(Number.MAX_VALUE * 1.1)

