// Copyright 2012 Andrew Meneely. 
// Licensed under the Educational Community License, Version 2.0 (the "License"); 
// you may not use this file except in compliance with the License. 
// You may obtain a copy of the License at http://www.osedu.org/licenses/ECL-2.0. 
// Unless required by applicable law or agreed to in writing, 
// software distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
// See the License for the specific language governing permissions 
// and limitations under the License.

import java.io.FileNotFoundException;
import java.security.MessageDigest;
import java.util.Scanner;
import java.security.SecureRandom;
import javax.xml.bind.DatatypeConverter;

public class Authenticate {
	private static String salt;
	private static String saltedPassword;

	public static void main(String[] args) throws Exception {
		Scanner scanner = new Scanner(System.in);
		System.out.print("Type in the password to set (try \"password\"): ");
		String password = scanner.nextLine();
		salt = getSalt();
		saltedPassword = saltedSha256(password, salt);
		System.out.println("Here are some digests:");
		System.out.println("\tPlaintext password: \n\t\t" + password);
		System.out.println("\tSecurely-generated salt: \n\t\t" + salt);
		System.out.println("\tPassword hashed by SHA-256 (try Googling it...): ");
		System.out.println("\t\t" + sha256(password));
		System.out.println("\tPassword hashed by salted SHA-256:");
		System.out.println("\t\t" + saltedPassword);
		System.out.println("Without the salt, nobody can crack the password.");
		System.out.println("\nNow lets authenticate against the salted password.");
		System.out.print("Type in that password again: ");
		password = scanner.nextLine();
		if (saltedSha256(password, salt).equals(saltedPassword)) {
			System.out.println("Authenticated!");
		} else {
			System.out.println("Passwords did not match.");
		}
		scanner.close();
	}
	/**
	 * Return a b64-encoded sha256 hash of an input string.
	 * @param str string to be hashed
	 * @return b64-encoded hash value
	 */
	private static String sha256(String str) throws Exception {
		MessageDigest d = MessageDigest.getInstance("SHA-256");
		return new String(DatatypeConverter.printBase64Binary(d.digest(str.getBytes())));
	}
	/**
	 * Append a precomputed salt to a password and then sha256 hash it.
	 * @param password 	password to salt and hash
	 * @param salt 	salt value to be used
	 * @return hashed and salted password
	 */
	private static String saltedSha256(String password, String salt) throws Exception {
		return sha256(password + salt);
	}
	/**
	 * Use a secure random number generator to generate a salt value.
	 *
	 * Uses Java's SecureRandom class to generate a 256-bit secure salt value.
	 * Choosing a large salt length (at least as long as the output of the hash function 
	 * being used to store the password) helps to confound attackers who would try to
	 * build tables of precomputed salted passwords by making the search space very, 
	 * very large.
	 *
	 * @return	a securely generated 256-bit salt string (b64 encoded)
	 */
	private static String getSalt() {
		SecureRandom gen = new SecureRandom();
		byte[] salt = new byte[32];
		gen.nextBytes(salt);
		return DatatypeConverter.printBase64Binary(salt);
	}

}
